const express = require('express');
const { Telegraf } = require('telegraf');
const pool = require('./db');
require('dotenv').config();
const path = require('path');

const app = express();
app.use(express.json());
app.use(express.static(path.join(__dirname, 'web')));

const bot = new Telegraf(process.env.BOT_TOKEN);

app.get('/getRole', async (req, res) => {
    try {
        const { userId } = req.query;
        const result = await pool.query('SELECT role FROM users WHERE telegram_id = $1', [userId]);

        if (result.rows.length > 0) {
            res.json({ role: result.rows[0].role });
        } else {
            res.json({ role: null });
        }
    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏');
    }
});

app.post('/setRole', async (req, res) => {
    try {
        const { userId, role } = req.body;
        await pool.query(
            'INSERT INTO users (telegram_id, role) VALUES ($1, $2) ON CONFLICT (telegram_id) DO UPDATE SET role = $2',
            [userId, role]
        );
        res.sendStatus(200);
    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏');
    }
});

app.get('/photographers', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM photographers');
        res.json(result.rows);
    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤');
    }
});

bot.start((ctx) => {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ì–∞–ª–µ—Ä–µ—é"! –û—Ç–∫—Ä—ã–≤–∞–π –º–∏–Ω–∏–∞–ø–ø:', {
        reply_markup: {
            inline_keyboard: [[
                { text: 'üì∏ –û—Ç–∫—Ä—ã—Ç—å –ì–∞–ª–µ—Ä–µ—é', web_app: { url: process.env.WEBAPP_URL } }
            ]]
        }
    });
});

const WEBAPP_URL = process.env.WEBAPP_URL.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
bot.telegram.setWebhook(`${WEBAPP_URL}/bot${process.env.BOT_TOKEN}`);

app.post(`/bot${process.env.BOT_TOKEN}`, (req, res) => {
    bot.handleUpdate(req.body);
    res.sendStatus(200);
});

app.listen(process.env.PORT || 3000, () => console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!'));
