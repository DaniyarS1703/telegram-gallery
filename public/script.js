document.addEventListener("DOMContentLoaded", async () => {
    const photographersList = document.getElementById("photographers");

    if (!photographersList) {
        console.error("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä #photographers –≤ index.html");
        return;
    }

    photographersList.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤...</p>";

    try {
        const response = await fetch("https://telegram-gallery.onrender.com/api/photographers");
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        let photographers = await response.json();

        // üìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ‚Äì —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
        photographers.sort((a, b) => {
            if (b.rating === a.rating) return Math.random() - 0.5;
            return b.rating - a.rating;
        });

        if (photographers.length === 0) {
            photographersList.innerHTML = "<p>–§–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>";
        } else {
            photographersList.innerHTML = "";
            photographers.forEach((photographer) => {
                const photographerElement = document.createElement("div");
                photographerElement.classList.add("photographer");

                photographerElement.innerHTML = `
                    <div class="photographer-card">
                        <img src="${photographer.avatar}" alt="${photographer.name}" class="avatar">
                        <h2>${photographer.name}</h2>
                        <p>${photographer.bio || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</p>
                        <div class="rating-container">
                            <span class="rating-number">${photographer.rating.toFixed(1)}</span>
                            <div class="rating">${generateStars(photographer.rating)}</div>
                        </div>
                        <div class="portfolio">${generatePortfolio(photographer.portfolio)}</div>
                    </div>
                `;

                photographersList.appendChild(photographerElement);
            });

            // üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º drag & scroll (–¢–í–û–ô –≤–∞—Ä–∏–∞–Ω—Ç)
            setupStableDrag();

            // üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∏ –ª–∏—Å—Ç–∞–Ω–∏–µ–º
            setupModal();
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤:", error);
        photographersList.innerHTML = "<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p>";
    }
});

// üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
function generateStars(rating) {
    let starsHTML = "";
    for (let i = 1; i <= 5; i++) {
        if (i <= Math.floor(rating)) {
            starsHTML += `<span class="star full"></span>`; // –ü–æ–ª–Ω–∞—è –∑–≤–µ–∑–¥–∞
        } else if (i - rating < 1) {
            starsHTML += `<span class="star half"></span>`; // –ü–æ–ª–æ–≤–∏–Ω–∞ –∑–≤–µ–∑–¥—ã
        } else {
            starsHTML += `<span class="star empty"></span>`; // –ü—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞
        }
    }
    return starsHTML;
}

// üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
function generatePortfolio(images) {
    if (!images || images.length === 0) return "<p>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>";

    return images.map(img => `<img src="${img}" alt="–§–æ—Ç–æ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ" class="portfolio-img">`).join("");
}

// üìå **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Drag & Scroll (–¢–í–û–ô –í–ê–†–ò–ê–ù–¢)**
function setupStableDrag() {
    document.querySelectorAll(".portfolio").forEach(portfolio => {
        let isDown = false;
        let startX, scrollLeft;

        portfolio.addEventListener("mousedown", (e) => {
            isDown = true;
            startX = e.pageX - portfolio.offsetLeft;
            scrollLeft = portfolio.scrollLeft;
            portfolio.classList.add("active");
        });

        portfolio.addEventListener("mouseleave", () => {
            isDown = false;
            portfolio.classList.remove("active");
        });

        portfolio.addEventListener("mouseup", () => {
            isDown = false;
            portfolio.classList.remove("active");
        });

        portfolio.addEventListener("mousemove", (e) => {
            if (!isDown) return;
            e.preventDefault();
            const x = e.pageX - portfolio.offsetLeft;
            const walk = (x - startX) * 2; // –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            portfolio.scrollLeft = scrollLeft - walk;
        });
    });
}

// üìå –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑—É–º–æ–º + –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º + –ª–∏—Å—Ç–∞–Ω–∏–µ–º —Å—Ç—Ä–µ–ª–∫–∞–º–∏
function setupModal() {
    const modal = document.createElement("div");
    modal.classList.add("modal");
    modal.innerHTML = `
        <div class="modal-content">
            <span class="close">&times;</span>
            <img src="" alt="–ü—Ä–æ—Å–º–æ—Ç—Ä" class="modal-img">
            <button class="modal-prev">&#9664;</button>
            <button class="modal-next">&#9654;</button>
        </div>
    `;
    document.body.appendChild(modal);

    const modalImg = modal.querySelector(".modal-img");
    const closeModal = modal.querySelector(".close");
    const prevBtn = modal.querySelector(".modal-prev");
    const nextBtn = modal.querySelector(".modal-next");

    let currentImages = [];
    let currentIndex = 0;

    document.querySelectorAll(".portfolio-img").forEach((img, index, array) => {
        img.addEventListener("click", () => {
            currentImages = array;
            currentIndex = index;
            modal.style.display = "flex";
            updateModalImage();
        });
    });

    function updateModalImage() {
        modalImg.src = currentImages[currentIndex].src;
        prevBtn.style.display = currentIndex === 0 ? "none" : "block";
        nextBtn.style.display = currentIndex === currentImages.length - 1 ? "none" : "block";
    }

    prevBtn.addEventListener("click", () => {
        if (currentIndex > 0) {
            currentIndex--;
            updateModalImage();
        }
    });

    nextBtn.addEventListener("click", () => {
        if (currentIndex < currentImages.length - 1) {
            currentIndex++;
            updateModalImage();
        }
    });

    closeModal.addEventListener("click", () => {
        modal.style.display = "none";
    });

    modal.addEventListener("click", (e) => {
        if (e.target === modal) {
            modal.style.display = "none";
        }
    });

    // üìå –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑—É–º (–¥–≤–∏–∂–µ–Ω–∏–µ + —É–≤–µ–ª–∏—á–µ–Ω–∏–µ)
    modalImg.addEventListener("wheel", (e) => {
        e.preventDefault();
        let scale = Math.min(Math.max(1, modalImg.width * 0.001 + e.deltaY * -0.01), 3);
        modalImg.style.transform = `scale(${scale})`;
        modalImg.style.cursor = "grab";
    });

    modalImg.addEventListener("mousedown", (e) => {
        let startX = e.clientX;
        let startY = e.clientY;
        let originX = modalImg.offsetLeft;
        let originY = modalImg.offsetTop;

        function moveHandler(event) {
            modalImg.style.left = `${originX + (event.clientX - startX)}px`;
            modalImg.style.top = `${originY + (event.clientY - startY)}px`;
        }

        function upHandler() {
            document.removeEventListener("mousemove", moveHandler);
            document.removeEventListener("mouseup", upHandler);
        }

        document.addEventListener("mousemove", moveHandler);
        document.addEventListener("mouseup", upHandler);
    });
}
