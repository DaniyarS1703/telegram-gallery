document.addEventListener("DOMContentLoaded", async () => {
    const photographersList = document.getElementById("photographers");

    if (!photographersList) {
        console.error("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä #photographers –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    photographersList.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤...</p>";

    try {
        const response = await fetch("https://telegram-gallery.onrender.com/api/photographers");
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        let photographers = await response.json();
        console.log("–§–æ—Ç–æ–≥—Ä–∞—Ñ—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", photographers);

        if (photographers.length === 0) {
            photographersList.innerHTML = "<p>–§–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>";
        } else {
            // üìå –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –µ—Å–ª–∏ —Ä–∞–≤–µ–Ω ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            photographers.sort((a, b) => {
                if (b.rating === a.rating) return Math.random() - 0.5;
                return b.rating - a.rating;
            });

            photographersList.innerHTML = "";
            photographers.forEach((photographer) => {
                const photographerElement = document.createElement("div");
                photographerElement.classList.add("photographer");

                photographerElement.innerHTML = `
                    <div class="photographer-card">
                        <img src="${photographer.avatar}" alt="${photographer.name}" class="avatar">
                        <h2>${photographer.name}</h2>
                        <p>${photographer.bio || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</p>
                        <div class="rating">${generateStarRating(photographer.rating)}</div>
                        <p class="rating-number">${photographer.rating.toFixed(1)}</p>
                        
                        <div class="portfolio-container">
                            <button class="scroll-button left" onclick="scrollPortfolio(this, -1)">&#9664;</button>
                            <div class="portfolio">
                                ${photographer.portfolio.map(img => `
                                    <img src="${img}" alt="–§–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ" onclick="openModal('${img}')">
                                `).join('')}
                            </div>
                            <button class="scroll-button right" onclick="scrollPortfolio(this, 1)">&#9654;</button>
                        </div>
                    </div>
                `;

                photographersList.appendChild(photographerElement);

                // üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drag & Scroll
                setupDragScroll(photographerElement.querySelector(".portfolio"));
            });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤:", error);
        photographersList.innerHTML = "<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p>";
    }
});

// üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—ë–∑–¥–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
function generateStarRating(rating) {
    const fullStars = Math.floor(rating);
    const halfStar = rating % 1 >= 0.5 ? '<span class="star half">&#9733;</span>' : '';
    const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

    return '‚òÖ'.repeat(fullStars) + halfStar + '‚òÜ'.repeat(emptyStars);
}

// üìå –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –º—ã—à–∫–æ–π
function setupDragScroll(portfolio) {
    let isDown = false;
    let startX, scrollLeft;

    portfolio.addEventListener("mousedown", (e) => {
        isDown = true;
        startX = e.pageX - portfolio.offsetLeft;
        scrollLeft = portfolio.scrollLeft;
        portfolio.style.cursor = "grabbing";
    });

    portfolio.addEventListener("mouseleave", () => {
        isDown = false;
        portfolio.style.cursor = "grab";
    });

    portfolio.addEventListener("mouseup", () => {
        isDown = false;
        portfolio.style.cursor = "grab";
    });

    portfolio.addEventListener("mousemove", (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - portfolio.offsetLeft;
        const walk = (x - startX) * 2; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        portfolio.scrollLeft = scrollLeft - walk;
    });
}

// üìå –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏
function scrollPortfolio(button, direction) {
    const portfolio = button.parentElement.querySelector(".portfolio");
    portfolio.scrollLeft += direction * 150;
}

// üìå –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function openModal(imageUrl) {
    const modal = document.createElement("div");
    modal.classList.add("modal");

    modal.innerHTML = `
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <img src="${imageUrl}" alt="–§–æ—Ç–æ" class="modal-image">
        </div>
    `;

    document.body.appendChild(modal);
    modal.addEventListener("click", closeModal);
}

// üìå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modal = document.querySelector(".modal");
    if (modal) {
        modal.remove();
    }
}
