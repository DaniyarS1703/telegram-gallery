document.addEventListener("DOMContentLoaded", async () => {
    const photographersList = document.getElementById("photographers");

    if (!photographersList) {
        console.error("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä #photographers –≤ index.html");
        return;
    }

    photographersList.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤...</p>";

    try {
        const response = await fetch("https://telegram-gallery.onrender.com/api/photographers");
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        let photographers = await response.json();

        // üìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ‚Äì —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
        photographers.sort((a, b) => {
            if (b.rating === a.rating) return Math.random() - 0.5;
            return b.rating - a.rating;
        });

        if (photographers.length === 0) {
            photographersList.innerHTML = "<p>–§–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>";
        } else {
            photographersList.innerHTML = "";
            photographers.forEach((photographer) => {
                const photographerElement = document.createElement("div");
                photographerElement.classList.add("photographer");

                photographerElement.innerHTML = `
                    <div class="photographer-card">
                        <img src="${photographer.avatar}" alt="${photographer.name}" class="avatar">
                        <h2>${photographer.name}</h2>
                        <p>${photographer.bio || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</p>
                        <div class="rating">${generateStars(photographer.rating)}</div>
                        <div class="portfolio">${generatePortfolio(photographer.portfolio)}</div>
                    </div>
                `;

                photographersList.appendChild(photographerElement);
            });

            // üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º drag & scroll
            setupOldDrag();

            // üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º
            setupModal();
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤:", error);
        photographersList.innerHTML = "<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p>";
    }
});

// üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
function generateStars(rating) {
    let starsHTML = "";
    for (let i = 1; i <= 5; i++) {
        if (i <= Math.floor(rating)) {
            starsHTML += `<span class="star full"></span>`; // –ü–æ–ª–Ω–∞—è –∑–≤–µ–∑–¥–∞
        } else if (i - rating < 1) {
            starsHTML += `<span class="star half"></span>`; // –ü–æ–ª–æ–≤–∏–Ω–∞ –∑–≤–µ–∑–¥—ã
        } else {
            starsHTML += `<span class="star empty"></span>`; // –ü—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞
        }
    }
    return starsHTML;
}

// üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
function generatePortfolio(images) {
    if (!images || images.length === 0) return "<p>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>";

    return images.map(img => `<img src="${img}" alt="–§–æ—Ç–æ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ" class="portfolio-img">`).join("");
}

// üìå Drag & Scroll –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
function setupOldDrag() {
    document.querySelectorAll(".portfolio").forEach(portfolio => {
        let isDragging = false;
        let startX;
        let scrollLeft;

        portfolio.addEventListener("mousedown", (e) => {
            isDragging = true;
            startX = e.pageX - portfolio.offsetLeft;
            scrollLeft = portfolio.scrollLeft;
            portfolio.style.cursor = "grabbing";
        });

        portfolio.addEventListener("mouseleave", () => {
            isDragging = false;
            portfolio.style.cursor = "grab";
        });

        portfolio.addEventListener("mouseup", () => {
            isDragging = false;
            portfolio.style.cursor = "grab";
        });

        portfolio.addEventListener("mousemove", (e) => {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - portfolio.offsetLeft;
            const walk = (x - startX) * 2;
            portfolio.scrollLeft = scrollLeft - walk;
        });
    });
}

// üìå –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑—É–º–æ–º + –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º
function setupModal() {
    const modal = document.createElement("div");
    modal.classList.add("modal");
    modal.innerHTML = `
        <div class="modal-content">
            <span class="close">&times;</span>
            <img src="" alt="–ü—Ä–æ—Å–º–æ—Ç—Ä" class="modal-img">
        </div>
    `;
    document.body.appendChild(modal);

    const modalImg = modal.querySelector(".modal-img");
    const closeModal = modal.querySelector(".close");

    document.querySelectorAll(".portfolio-img").forEach(img => {
        img.addEventListener("click", () => {
            modal.style.display = "flex";
            modalImg.src = img.src;
            modalImg.style.transform = "scale(1)";
            modalImg.dataset.scale = "1";
        });
    });

    closeModal.addEventListener("click", () => {
        modal.style.display = "none";
    });

    modal.addEventListener("click", (e) => {
        if (e.target === modal) {
            modal.style.display = "none";
        }
    });

    // üìå –î–æ–±–∞–≤–ª—è–µ–º –∑—É–º + –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    let scale = 1;
    let isDragging = false;
    let startX, startY, imgX = 0, imgY = 0;

    modalImg.addEventListener("wheel", (e) => {
        e.preventDefault();
        const zoomFactor = 0.1;
        let newScale = scale + (e.deltaY < 0 ? zoomFactor : -zoomFactor);
        newScale = Math.max(1, Math.min(newScale, 3));

        if (newScale !== scale) {
            scale = newScale;
            modalImg.style.transform = `scale(${scale}) translate(${imgX}px, ${imgY}px)`;
        }
    });

    modalImg.addEventListener("mousedown", (e) => {
        if (scale > 1) {
            isDragging = true;
            startX = e.clientX - imgX;
            startY = e.clientY - imgY;
            modalImg.style.cursor = "grabbing";
        }
    });

    document.addEventListener("mouseup", () => {
        isDragging = false;
        modalImg.style.cursor = "grab";
    });

    document.addEventListener("mousemove", (e) => {
        if (isDragging) {
            imgX = e.clientX - startX;
            imgY = e.clientY - startY;
            modalImg.style.transform = `scale(${scale}) translate(${imgX}px, ${imgY}px)`;
        }
    });
}
